Angular2应用程序应用主要由以下8个部分组成：
    模块        Module
    组件        Components
    模板        Templates
    元数据       Metadata
    数据绑定     Data Binding
    指令        Directives
    服务        Services
    依赖注入     Dependency Injection

1.模块
  模块由一块代码组成,可用于执行简单的任务
  Angular应用是模块化的,有自己的模块系统:NgModules。
  每个Angular应该至少要有一个模块(根模块),一般可以命名为:AppModule
  Angular模块是一个带有@NgModule装饰器的类,它接收一个用来描述模块属性的元数据对象
  重要属性：
      declarations(声明)-视图类属于这个模块。Angular有三种类型的视图类：组件、指令和管道
      exports-声明(declaration)的子集,可用于其他模块中的组件模板
      imports-本模板组件模板中需要由其他导出类的模板
      providers-服务的创建者。本模块把他们加入全局的服务表中,让他们在应用中的任何部分都可以被访问到
      bootstrap-应用的主视图,称为根组件,它是所有其他应用视图的宿主。只有根模块需要设置bootstrap属性
  一个最简单的根模块：
      app/app.module.ts文件:
      import {NgModule} from '@angular/core';
      import {BrowserModule} from '@angular/platform-browser';
      @NgModule({
        imports:[BrowserModule],
        providers:    [ Logger ],
        declarations: [ AppComponent ],
        exports:      [ AppComponent ],
        bootstrap:    [ AppComponent ]
      })
      export class AppModule{ }
      通过引导根模块来启动应用,通常在main.ts文件中来引导AppModule:
      app/main.ts
      import {platformBrowserDynamic} from '@angular/platform-browser-dynamic';
      import {AppModule} from './app.module';
      platformBrowserDynamic().bootstrapModule(AppModule);
2.组件
  组件是一个模板的控制类用于处理应用和逻辑页面的视图部分
  组件是构成Angular应用的基础和核心,可用于整个应用程序中
  组件知道如何渲染自己即配置依赖注入
  组件通过一些由属性和方法组成的API与视图交互
  创建Angular组件的方法有三步:
    1).从@angular/core中引用Component修饰器
    2).建立一个普通的类,并用@Component修饰它
    3).在@Component中,设置selector自定义标签,以及template模版
3.模版
  Angular模版的默认语言就是HTML
  可以通过使用模版来定义组件的视图来告诉Angular如何展示组件：
    <div>
        网址：{{site}}
    </div>
  在Angular中,默认使用双大括号作为插值语法,大括号中间的值通常是一个组件属性的变量名
4.元数据
  元数据告诉Angular如何处理一个类
  考虑以下情况：
    有一个组件叫做Component,他是一个类,直到告诉Angular这是一个组件为止
    可以把元数据附加到这个类上来告诉angular,Component是一个组件
    在TypeScript中,使用装饰器(decorator)来附加元数据
    eg:
        @Component({
            selector:'mylist',
            template:'<h2>菜鸟教程</h2>'，
            directives:[ComponentDetails]
        })
        export class ListComponent{ }
        @Component装饰器能接受一个配置对象,并把紧随其后的类标记成了组件类
        Angular 会基于这些信息创建和展示组件及其视图
        @Component中的配置项说明:
            selector - 一个css选择器,它告诉Angular在父级HTML中寻找一个<mylist>标签,然后创建该组件,并插入此标签中
            template - 组件HTML模板的地址
            directives - 一个数组,包含此模板需要依赖的组件或者指令
            providers - 一个数组,包含组件所依赖的范围所需要的依赖注入提供者
5.数据绑定
  数据绑定为应用程序提供了一个简单而一致的办法来显示数据和数据交互,它是管理应用程序里面数值的一种机制
  通过这种机制,可以从HTML里面取值和赋值,使得数据的读写,数据的持久化操作变得更加简单快捷
  数据绑定的语法有四种形式：
    插值:在HTML标签中显示组件值
        <h3>
            {{title}}
            <img src="{{ImageUrl}}">
        </h3>
    属性绑定：把元素的属性设置为组件中属性的值
        <img [src]="userImageUrl">
    事件绑定:在组件方法名被点击时触发
        <button (click)="onSave()">保存</button>
    双向绑定：使用Angular里的NgModule指令可以更便捷的进行双向绑定
        <input [value]="currentUser.firstName" (input)="currentUser.firstName=$event.target.value">
6.指令
  Angular模板是动态的。当Angular渲染他们时,它会根据指令对DOM进行修改
  指令是一个带有'指令元数据'的类。在TypeScript中,要通过@Directive装饰器把元数据附加到类上
  在Angular中包含以下三种类型指令:
  属性指令:以元素的属性形式来使用的指令
  解构指令:用来改变DOM树的结构
  组件:作为指令的一个重要的子类,组件本质上可以看做是一个带有模板的指令
  <li *ngFor="let site of sites"></li>
  <site-detail *ngIf='selectedSize'></site-detail>
    *ngFor 告诉Angular为sites列表中的每个项生成一个<li>标签
    *ngIf 表示只有在选择项存在时,才会包含SiteDetail组件
7.服务
  Angular2中的服务是封装了某一特定功能,并且可以通过注入的方式供他人使用的独立模块
  服务分为很多种,包括:值、函数、以及应用所需的特性
  例如,多个组件中出现了重复代码时,把重复代码提取到服务中实现代码复用
  常见服务:
    日志服务
    数据服务
    消息总线
    税款计算器
    应用程序配置
  eg:
    日志服务的例子,用于把日志记录到浏览器的控制台
    export class Logger{
        log(msg:any){console.log(msg);}
        error(msg:any){console.log(msg);}
        warn(msg:any){console.log(msg);}
    }
8.依赖注入
  控制反转,是面向对象编程中的一种设计原则,可以用来减低计算机代码之间的耦合度。
  其中最常见的方式叫依赖注入,还有一种方式叫依赖查找
  通过控制反转,对象在被创建的时候,由一个调控系统内所有对象的外界实体,将其所依赖的对象引用传递给它。
  也可以说,依赖被注入到对象中
  在传统的开发模式中,调用者负责管理所有对象的依赖,循环依赖一直是梦魇,而在依赖注入模式中,这个管理交给了注入器
  他在软件运行时负责依赖对象的替换,而不是在编译时
  这种控制反转,运行注入的特点即是依赖注入的精华所在

  Angular能通过查看构造函数的参数类型,来得知组件需要哪些服务
  例如,SiteListComponent组件的构造函数需要一个SiteService
    constructor(private service:HeroService){ };
    当Angular创建组件时,会首先为组件所需的服务找一个注入器
    注入器是一个维护服务实例的容器,存放着以前创建的实例
    如果容器还没有所请求的服务实例,注入器就会创建一个服务实例,并且添加到容器中,然后把这个服务返回给Angular
    当所有服务都被解析完并返回时,Angular会以这些服务为参数去调用组件的构造函数。这就是依赖注入


















