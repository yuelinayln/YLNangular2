AngularJS2 模版语法
1.HTML
  HTML是Angular模板的'语言',除了<script>元素是被禁用的外,其他HTML元素都是支持的

2.插值表达式
  插值表达式的语法格式为:{{...}}
  插值表达式可以把计算的字符串插入HTML中,也可以作为属性值来使用
    <h3>
        {{title}}
        <img src="{{imageUrl}}" style="height:30px">
    </h3>
3.模版表达式
  {{...}}里头其实就是一个模版表达式,Angular会对其进行求值并转化为字符串输出
    <!-- The sum of 1+1 is 2 -->
    <p>The sum of 1+1 is {{1+1}}</p>
    可以使用getVal()来获取表达式的值：
    <!-- "4" -->
    <p>{{1+1+getVal()}}</p>
  模版表达式类似JS语言,很多JS表达式也是合法的模板表达式,但不是全部
  以下的JS表达式是禁止的:
    赋值表达式(= += -=)
    new 操作符
    带有 ; 或者 ' 的连接表达式
    自增和自减操作(++ --)其他与JS语法不同的值得注意的包括：
    不支持位运算符(|和&)
    模板表达式的操作符如 | 和 ? 等被赋予了新的含义
4.属性绑定
  模板的属性绑定可以把视图元素的属性设置为模板表达式
  最常用的属性绑定是把元素的属性设置为组件中的属性值
  例如：
    img元素的src属性会被绑定到组件的imageUrl属性上:
        <img [src]="imageUrl">
    当组件为isUnchanged(未改变)时禁用一个按钮:
        <button [disabled]="isUnchanged">按钮是禁用的</button>
    设置指令的属性：
        <div [ngClass]="classes">[ngClass]绑定到classes属性<div>
    设置一个自定义组件的属性(这是父子组件间通讯的重要途径)
        <user-detail [user]="currentUser"></user-detail>
5.HTML属性(Attribute)、class和style绑定
  模板语法为那些不太适合使用属性绑定的场景提供了专门的单项数据绑定
  属性(Attribute)绑定
    当医生没有属性可以绑定的时候,使用HTML标签属性Attribute绑定
    考虑ARIA,SVG和table中的colspan/rowspan等属性,他们是纯粹的属性,没有对应的属性可以提供数据绑定
    以下实例报错:
        <tr>
            <td colspan="{{1+1}}">Three-Four</td>
        </tr>
        错误:Template parse error;
            can’t bind to 'colspan' since it isn't a known native property
            模板解析错误:不能绑定到'colspan',因为它不是已知的原生属性

        正如提示所说,<td>元素没有colspan属性。但是插值表达式和属性绑定只能设置属性而不是Attribute,
        所以需HTML标签Attribute绑定来创建和绑定类似的Attribute
        HTML标签特性绑定在语法上类似于属性绑定,但中括号中的部分不是一个元素的属性名,
        而是由一个attr.的前缀和HTML标签属性的名称组成,然后通过一个能求值为字符串的表达式来设置HTML标签属性的值
            <table>
                <tr>
                    <td [attr.colspan]="1+1">one-two</td>
                </tr>
                <tr>
                    <td>five</td>
                    <td>six</td>
                </tr>
            </table>
6.CSS类绑定
  借助CSS类绑定,可以从元素的class属性上添加和移除CSS类名
  CSS类绑定在语法上类似于属性绑定。
  但方括号中的部分不是一个元素属性名,而是包括一个class前缀,紧跟着一个点 . 再跟着css类的名字组成
  其中后两部分是可选的:[class.class-name]
  例子展示了如何通过css绑定类添加和移除"special"类:
    <!-- 标准HTML样式类设置 -->
    <div class="bad curly special">bad curly special<div>
    <!-- 通过绑定重设或覆盖样式类 -->
    <div class="bad curly special" [class]="badCurly">bad curly</div>
    <!-- 通过一个属性值来添加或移除special样式类 -->
    <div [class.special]="isSpecial">这个样式比较特殊</div>

7.style样式绑定
  通过样式绑定可以设置内联样式。样式绑定语法上类似于属性绑定,但中括号里面的部分不是一个元素的属性名,
  样式绑定包括一个style. 紧跟着css样式的属性名,例如：[style.style-property]
  <button [style.color]="isSpecial ? 'red':'green'">红色</button>
  <button [style.background-color]="canSave?'cyan':'grey'">保存</button>
  <!-- 带有单位的样式绑定 -->
  <button [style.font-size.em]="isSpecial?3:1">大</button>
  <button [style.font-size.%]="!isSpecial?150:50">小</button>
  样式属性可以是中线命名法(font-size)也可以是驼峰命名(fontSize)

8.事件绑定
  在事件绑定中,Angular通过监听用户动作,比如键盘事件、鼠标事件、触屏事件等来响应相对应的数据流向---从视图目标到数据源
  事件绑定的语法是由等号左侧小括号内的目标事件和右侧引号中的模板声明组成
  例如:
    <button (click)="onSave()">保存</button>
    例子是事件绑定监听按钮的点击事件。只要点击鼠标,都会调用组件的onSave()方法

    <button (click)="onSave()">save</button>
    圆括号中的名称,比如(click),标记出了目标事件,例子中目标是按钮的click事件

    <button on-click="onSave()">on click</button>
    也可以使用on- 前缀的形式
9.使用NgModule进行双向数据绑定
  当开发数据输入表单时,期望的结果是既能将组件的数据显示到表单上,也能在用户修改时更新组件的数据
  以下是一个通过[(NgModel)]来实现双向数据绑定：
  <input [(ngModel)]="currentUser.firstName">
  [] 实现了数据流从组件到模版
  () 实现了数据流从模版到组件
  两者一结合[()]就实现了双向绑定
  使用前缀形式的语法:???不懂
  <input bindon-ngModel="currentUser.firstName">
10.内置指令
   Angular的内置指令有NgClass、NgStyle、NgIf、NgFor、NgSwitch等
   NgClass
        通过绑定到NgCLass动态添加或者删除CSS类
        <div [style.font-size]="isSpecial?'x-large':'smaller'">
            这个div是大号的
        </div>
   NgStyle
        通过把它绑定到一个key:value控制对象的形式,可以同时设置很多关联样式
        setStyles(){
            let styles={
                //CSS属性名
                'font-style':this.canSave ? 'italic':'normal',//italic
                'font-weight':!this.isUnchanged ? 'bold':'normal',//normal
                'font-size':this.isSpecial ? '24px':'8px',//24px
            }
            return styles;
        }
        通过添加一个NgStyle鼠标绑定,让他调用setStyle,并据此来设置元素的样式
        <div [ngStyle]="setStyles()">
            这个div的样式是italic,normal weight和extra large(24px)
        </div>
   NgIf
   通过把NgIf指令绑定到一个真值表达式,可以把一个元素及其子元素添加到DOM树上
        <div *ngIf="currentUser">Hello,{{currentUser.firstName}}</div>
   相反,绑定到一个假值表达式将从DOM树上移除该元素及其子元素
   <!-- 因为isActive的值为false,所以User Detail不在DOM树上 -->
        <user-detail *ngIf="isActive"><user-detail>
   NgSwitch
   当需要从一组可能的元素树中根据条件显示其中一个时,就需要NgSwitch
   Angular将只把选中的元素添加进DOM中
        <span [ngSwitch]="userName">
            <span *ngSwitchCase="'张一'">张一</span>
            <span *ngSwitchCase="'张二'">张二</span>
            <span *ngSwitchCase="'张三'">张三</span>
            <span *ngSwitchCase="'张四'">张四</span>
            <span *ngSwitchDefault>张五</span>
        </span>
        把作为父指令的NgSwitch绑定到一个能返回开关值的表达式,例子中这个值是字符串,但是他可以是任何类型的值
        父指令NgSwitch控制一组<span>子元素
        每个<span>或者挂在一个匹配值的表达式上或者被标记为默认情况
        任何时候,这些span中最多只有一个会出现在DOM中
        如果这个span的匹配值和开关值相等,Angular2就把这个<span>添加DOM中
        如果没有任何span匹配上,Angular2就会把默认的span添加到DOM中
        Angular2会移除并销毁所有其他的span
        三个相互合作的指令:
        ngSwitch:绑定到一个开关返回值的表达式
        ngSwitchCase:绑定到一个匹配返回值的表达式
        ngSwitchDefault:一个用于标记默认元素的属性
        *****注意:不要在ngSwitch前使用*,而应该用属性绑定,
                 但是ngSwitchCase和NgSwitchDefault前面要放*
   NgFor
   当需要展示一个由多个条目组成的列表时就需要这个指令
        <div *ngFor="let user of users">{{user.fullName}}</div>

   NgFor也可以应用在一个组件元素上
        <user-detail *ngFor="let user of users" [user]="user"></user-detail>

   ngFor指令支持一个可选的index索引,在迭代过程中会从0增长到数组中的长度
   可以通过模板输出变量来捕获这个index,并应用在模版中
        <div *ngFor="let user of users;let i=index">
            {{i+1}}-{{user.fullName}}
        </div>
   NgForTrackBy
   ngFor指令有时候会性能较差,特别是在大型列表中,对一个条目的一点小更改、移除或添加,都会导致级联的DOM操作
   比如,当通过重新从服务器来刷新通讯录,刷新后的列表可能包含很多(如果不是全部的话)以前显示过的联系人
   但在Angular看来,他不知道哪些是以前就存在过的,只能清理旧列表、舍弃那些DOM元素,并用新的DOM元素来重建一个新列表
   解决这个问题,可以通过追踪函数来避免这种折腾
   追踪函数会告诉Angular：我们知道两个具有相同user.id的对象是同一个联系人
        trackByUsers(index:number,user:User){return user.id}
        然后把NgForTrackBy指令设置为那个追踪函数:
        <div *ngFor="let user of users;trackBy:trackByUsers">
            {{user.id}}{{user.fullName}}
        <div>
   追踪函数不会排除所有DOM更改。如果用来判断是否为同一个联系人的属性变化了,就会更新DOM元素
   反之就会留下这个DOM元素。列表界面就会变得比较更加平滑,具有更好的响应效果

11.模板引用变量
   模板引用变量是模板中对DOM元素或指令的引用
   它能在原生的DOM元素使用,也能用于Angular组件————实际上它可以和任何自定义的web组件协同工作
   可以在同一元素、兄弟元素或者任何子元素中引用模版引用变量
        <!-- phone 引用了 input元素,并将 value 传递给事件句柄 -->
            <input #phone placeholder="phone number">
            <button (click)="callPhone(phone.value)">Call</button>
            "phone"的#前缀意味着将要定义一个phone变量

        <!-- fax引用的input元素,并将value传递给了事件句柄 -->
            <input  ref-fax placeholder="fax number">
            <button (click)="callFax(fax.value)"></button>








