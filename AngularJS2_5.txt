用户点击链接、按下按钮或者输入文字时,这些交互行为都会触发DOM事件
1、绑定到用户输入事件:
   可以使用Angular事件绑定机制来响应任何DOM事件
   <button (click)="onClickMe()">点我！</button>
   等号左边的(click)表示把该按钮的点击事件作为绑定目标
   等号右边,引号中的文本是一个模版语句
   完整写法：
   app/click-me.component.ts 文件：
    import { Component } from '@angular/core';
    @Component({
        selector:'click me',
        template:`<button (click)="onClickMe()">
                    点我！
                  </button>
                  {{clickMessage}}`
    })
    export class ClickMeComponent{
        clickMessage='';
        onClickMe(){
            this.clickMessage='菜鸟教程'
        }
    }
2、通过$event对象获得用户输入 - 可以绑定到所有类型的事件
   @Component({
        selector:'key-up1',
        template:`<input (keyup)="onKey($event)">
                    <p>{{values}}</p>`
   })
   export class KeyUpComponent_v1{
        values='';
        //非强类型
        onKey(event:any){
            this.values+=event.target.value+'|'
        }
        //强类型
        onKey(event:KeyboardEvent){
            this.values+=(<HTMLInputElement>event.target).value+'|';
        }
   }
   代码中监听了一个事件捕获用户输入,Angular把事件对象存入$event变量中。
   组件的onKey()方法是用来从事件对象中提取出用户输入的,再将输入的值累加到values的属性
3、从一个模版引用变量中获得用户输入
   通过使用局部模版变量来显示用户数据,模版引用变量通过在标识符钱加 # 来实现
   @Component({
        selector:'loop-back',
        template:`<input #box (keyup)="0">
                  <p>{{box.value}}</p>`
   })
   export class LoopbackComponent{ }
   在<input>元素上定义了一个名叫box的模板引用变量。
   box变量引用的就是<input>元素本身,这意味着我们可以获得input元素的value值,并通过插值表达式把它显示在<p>标签中
   可以使用模版引用变量来修改keyup实例
   @Component({
        selector:'key-up2',
        template:`<input #box (keyup)="onKey(box.value)">
                  <p>{{values}}</p>`
   })
   export class KeyUpComponent_v2{
        values='';
        onKey(value:string){
            this.values+=value+'|'
        }
   }
4、按键事件过滤(通过key.enter)
   通过绑定Angular的keyup.enter伪事件监听回车键的事件
   @Component({
        selector:'key-up3',
        template:`<input #box (keyup.enter)="values=box.value">
                  <p>{{values}}</p>`
   })
   export class KeyUpComponent_v3{
        value='';
   }
5、blur(失去焦点)事件 - 可以在元素失去焦点后更新values属性
   @Component({
        selector:'key-up4',
        template:`<input #box (keyup.enter)="values=box.value (blur)="values=box.value">
                  <p>{{values}}</p>`
   })
   export class KeyUpComponent4{
        value='';
   }






















