AngularJS2 TypeScript 环境配置:
1.创建与项目配置：
  创建目录：
    mkdir angular-quickstart
    cd angular-quickstart
  创建配置文件：
    Angular项目需要以下几个配置文件:
        package.json 标记本项目需要的npm依赖包
        tsconfig.json 定义了TypeScript编译器如何从项目源文件生成JavaScript代码
        typings.json为那些TypeScript编译器无法识别的库提供了额外的定义文件
        systemjs.config.js为模块加载器提供了该到哪里查找应用模块的信息,并注册了所有必备的依赖包。他还包括文档中后面例子需要用到的包
    在angular-quickstart中创建以下几个文件:
    1).package.json 文件:
        {
          "name": "angular-quickstart",
          "version": "1.0.0",
          "scripts": {
            "start": "tsc && concurrently \"npm run tsc:w\" \"npm run lite\" ",
            "lite": "lite-server",
            "postinstall": "typings install",
            "tsc": "tsc",
            "tsc:w": "tsc -w",
            "typings": "typings"
          },
          "license": "ISC",
          "dependencies": {
            "@angular/common": "2.0.0",
            "@angular/compiler": "2.0.0",
            "@angular/core": "2.0.0",
            "@angular/forms": "2.0.0",
            "@angular/http": "2.0.0",
            "@angular/platform-browser": "2.0.0",
            "@angular/platform-browser-dynamic": "2.0.0",
            "@angular/router": "3.0.0",
            "@angular/upgrade": "2.0.0",
            "core-js": "^2.4.1",
            "reflect-metadata": "^0.1.3",
            "rxjs": "5.0.0-beta.12",
            "systemjs": "0.19.27",
            "zone.js": "^0.6.23",
            "angular2-in-memory-web-api": "0.0.20",
            "bootstrap": "^3.3.6"
          },
          "devDependencies": {
            "concurrently": "^2.2.0",
            "lite-server": "^2.2.2",
            "typescript": "^2.3.4",
            "typings":"^1.3.2"
          }
        }
    2).tsconfig.json 文件:
        {
          "compilerOptions": {
            "target": "es5",
            "module": "commonjs",
            "moduleResolution": "node",
            "sourceMap": true,
            "emitDecoratorMetadata": true,
            "experimentalDecorators": true,
            "removeComments": false,
            "noImplicitAny": false
          }
        }
    3).typings.json 文件:
        {
          "globalDependencies": {
            "core-js": "registry:dt/core-js#0.0.0+20160725163759",
            "jasmine": "registry:dt/jasmine#2.2.0+20160621224255",
            "node": "registry:dt/node#6.0.0+20160909174046"
          }
        }
    4).systemhs.config.js文件:
        /**
         * System configuration for Angular samples
         * Adjust as necessary for your application needs.
         */
        (function (global) {
          System.config({
            paths: {
              // paths serve as alias
              'npm:': 'node_modules/'
            },
            // map tells the System loader where to look for things
            map: {
              // our app is within the app folder
              app: 'app',
              // angular bundles
              '@angular/core': 'npm:@angular/core/bundles/core.umd.js',
              '@angular/common': 'npm:@angular/common/bundles/common.umd.js',
              '@angular/compiler': 'npm:@angular/compiler/bundles/compiler.umd.js',
              '@angular/platform-browser': 'npm:@angular/platform-browser/bundles/platform-browser.umd.js',
              '@angular/platform-browser-dynamic': 'npm:@angular/platform-browser-dynamic/bundles/platform-browser-dynamic.umd.js',
              '@angular/http': 'npm:@angular/http/bundles/http.umd.js',
              '@angular/router': 'npm:@angular/router/bundles/router.umd.js',
              '@angular/forms': 'npm:@angular/forms/bundles/forms.umd.js',
              // other libraries
              'rxjs':                       'npm:rxjs',
              'angular2-in-memory-web-api': 'npm:angular2-in-memory-web-api',
            },
            // packages tells the System loader how to load when no filename and/or no extension
            packages: {
              app: {
                main: './main.js',
                defaultExtension: 'js'
              },
              rxjs: {
                defaultExtension: 'js'
              },
              'angular2-in-memory-web-api': {
                main: './index.js',
                defaultExtension: 'js'
              }
            }
          });
        })(this);
2.创建应用
  用NgModule把Angular应用组织成了一些功能相关的代码块
  Angular本身是被拆成一些独立的Angular模块,这样在应用中只需要导入需要的Angular部分
  每个Angular应用本身至少需要一个root module(根模块),实例中为AppModule
  在angular-quickstart 目录下创建app目录：
    mkdir app
    cd app
  在app目录下创建app.module.ts文件：
    import {NgModule} from '@angular/core';
    import {BrowserModule} from '@angular/platform-browser';
    @NgModule({
    imports:[BrowserModule]
    });
    export class AppModule{};
    由于QuickStart是一个运行在浏览器中的web应用,所以根模块需要从@angular/platform-browser中导入BrowserModule并添加到imports数组中
  创建组件并添加到应用中
    每个Angular应用都应该至少有一个根组件,实例中为AppComponent,app.component.ts文件代码如下
    import {Component} form '@angular/core';
    @Component({
        selector:'my-app',
        template:'<h1>我的第一个Angular应用</h1>'
    });
    export class AppComponent{}
    分析:
        代码从angular2/core 引入了Component包
        @Component是Angular2的装饰器,它会把一份元数据关联到AppComponent组件类上
        my-app是一个CSS的选择器,可用在HTML标签,作为一个组件使用
        @view 包含了一个template,告诉Angular如何渲染该组件的视图
        export指定了组件可以在文件外使用
    重新打开app.modules.ts,导入新的AppComponent,并把它添加到NgModule装饰器的declarations和bootstrap中:
    import {NgModule} from '@angular/core';
    import {BrowserModule} from '@angular/platform-browser';
    import {AppComponent} from './app.component';
    @NgModule({
        imports:[BrowserModule],
        declarations:[AppComponent],
        bootstrap:[AppComponent]
    })
    export class AppModule{}
3.启动应用：
  在angular-quickstart/app目录下创建main.ts文件:
    import {platformBrowserDynamic} form '@angular/platform-browser-dynamic';
    import {AppModule} from './app.module';
    const platform=platformBrowserDynamic();
    platform.bootstrapModule(AppModule);
    以上代码初始化了平台,让代码可以运行,然后该平台上启动AppModule
  定义该应用的宿主界面
    在angular-quickstart目录下创建index.html:
    <html>
      <head>
        <title>Angular 2 实例 - 菜鸟教程(runoob.com)</title>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link rel="stylesheet" href="styles.css">
        <!-- 1. 载入库 -->
        <!-- IE 需要 polyfill -->
        <script src="node_modules/core-js/client/shim.min.js"></script>
        <script src="node_modules/zone.js/dist/zone.js"></script>
        <script src="node_modules/reflect-metadata/Reflect.js"></script>
        <script src="node_modules/systemjs/dist/system.src.js"></script>
        <!-- 2. 配置 SystemJS -->
        <script src="systemjs.config.js"></script>
        <script>
          System.import('app').catch(function(err){ console.error(err); });
        </script>
      </head>
      <!-- 3. 显示应用 -->
      <body>
        <my-app>Loading...</my-app>
      </body>
    </html>
    ****注意：
    1).JavaScript库:core-js是为老式浏览器提供的填充库,zone.js和reflect.metadata库是Angular需要,而SystemJS库是用来做模块加载的
    2).SystemJS的配置文件和脚本,可以导入并运行刚刚在main文件中写的app模块
    3).<my-app>标签是应用载入的地方
  添加一些样式：
    在angular-quickstart目录的styles.css文件中设置需要的样式
    /* Master Styles */
    h1 {
      color: #369;
      font-family: Arial, Helvetica, sans-serif;
      font-size: 250%;
    }
    h2, h3 {
      color: #444;
      font-family: Arial, Helvetica, sans-serif;
      font-weight: lighter;
    }
    body {
      margin: 2em;
    }
6.编译并运行应用程序
    npm start
    按顺序会报错
    修改package.json文件中start
    现在是是百度后的改动写法："start": "concurrently \"npm run tsc:w\" \"npm run lite\" ",
    教程写法： "start": "tsc && concurrently \"npm run tsc:w\" \"npm run lite\" ",












